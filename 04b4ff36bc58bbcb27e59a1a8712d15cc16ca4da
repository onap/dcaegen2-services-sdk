{
  "comments": [
    {
      "key": {
        "uuid": "265371fa_ca9ae835",
        "filename": "rest-services/dmaap-client/src/test/java/org/onap/dcaegen2/services/sdk/rest/services/dmaap/client/MessageRouterTestsUtils.java",
        "patchSetId": 2
      },
      "lineNbr": 101,
      "author": {
        "id": 3701
      },
      "writtenOn": "2019-06-18T11:55:22Z",
      "side": 1,
      "message": "Why not `Flux.fromIterable(getAsJsonObjects(messages))` or something similar?",
      "range": {
        "startLine": 101,
        "startChar": 15,
        "endLine": 101,
        "endChar": 70
      },
      "revId": "04b4ff36bc58bbcb27e59a1a8712d15cc16ca4da",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "daa2e90e_a4eaefeb",
        "filename": "rest-services/dmaap-client/src/test/java/org/onap/dcaegen2/services/sdk/rest/services/dmaap/client/api/MessageRouterPublisherIT.java",
        "patchSetId": 2
      },
      "lineNbr": 218,
      "author": {
        "id": 3701
      },
      "writtenOn": "2019-06-18T11:55:22Z",
      "side": 1,
      "message": "typo",
      "range": {
        "startLine": 218,
        "startChar": 44,
        "endLine": 218,
        "endChar": 50
      },
      "revId": "04b4ff36bc58bbcb27e59a1a8712d15cc16ca4da",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "872bb2d4_68da8b80",
        "filename": "rest-services/dmaap-client/src/test/java/org/onap/dcaegen2/services/sdk/rest/services/dmaap/client/impl/MessageRouterPublisherImplTest.java",
        "patchSetId": 2
      },
      "lineNbr": 93,
      "author": {
        "id": 3701
      },
      "writtenOn": "2019-06-18T11:55:22Z",
      "side": 1,
      "message": "Well, what is \u0027low number of elements\u0027 ? Is 10 low? Maybe 1000 is still low?\nIn testcase above we don\u0027t have this low part, so I assume that we are sending \"high number\" there, right?\n\nMaybe we could name these testcases like \"onPut_givenJsonMessages_whenTheirAmountIsBelowMaxBatchSize_shouldSendSingleHttpRequest\".\n\nThen in tests you could do: \n```\nfinal List\u003cString\u003e jsonMessages \u003d JSON_MESSAGES.subList(0, MAX_BATCH_SIZE - 1);\n```\n,where JSON_MESSAGES is extraction of this `getAsMRJsonMessages(List.of(\"I\", \"like\", \"cookies\"));` call that is all over tests\nand MAX_BATCH_SIZE is this magic `3` in *cut* constructor.\n\nFor me, this would make the tests less ambiguous and more readable, what do you think?",
      "range": {
        "startLine": 93,
        "startChar": 9,
        "endLine": 93,
        "endChar": 31
      },
      "revId": "04b4ff36bc58bbcb27e59a1a8712d15cc16ca4da",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ec7a1f3b_b21021fd",
        "filename": "rest-services/dmaap-client/src/test/java/org/onap/dcaegen2/services/sdk/rest/services/dmaap/client/impl/MessageRouterPublisherImplTest.java",
        "patchSetId": 2
      },
      "lineNbr": 114,
      "author": {
        "id": 3701
      },
      "writtenOn": "2019-06-18T11:55:22Z",
      "side": 1,
      "message": "```\nfor( i in 0..elements.length) {\n   assertThat(elements[i]).describedAs(\"Http request element at position $i\").isEqualTo(jsonMessages[i]);\n}\n```\nThen you can extract this to `fun assertListsContainSameElements(expected, actual)` and reuse later",
      "range": {
        "startLine": 112,
        "startChar": 0,
        "endLine": 114,
        "endChar": 83
      },
      "revId": "04b4ff36bc58bbcb27e59a1a8712d15cc16ca4da",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": true
    }
  ]
}